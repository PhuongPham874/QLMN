from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from HOME.models import NhanVien, ChamCong

@login_required
def cham_cong_view(request):
    if request.user.is_superuser:
        # N·∫øu l√† superuser, l·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n
        nhan_vien = get_object_or_404(NhanVien, user=request.user)
        nhan_viens = NhanVien.objects.all().order_by('id')  # S·∫Øp x·∫øp theo 'id' ho·∫∑c tr∆∞·ªùng kh√°c
        return render(request, 'ChamCong/danh_sach_nhan_vien.html', {
            'is_super': True,
            'nhan_viens': nhan_viens,
            'nhan_vien': nhan_vien
        })

    # N·∫øu l√† user th∆∞·ªùng ‚Üí x·ª≠ l√Ω nh∆∞ c≈©
    nhan_vien = get_object_or_404(NhanVien, user=request.user)
    cham_cong_data = ChamCong.objects.filter(nhan_vien=nhan_vien)

    cham_cong_theo_thang = {}
    all_months = set()
    all_years = set()

    for record in cham_cong_data:
        year = record.nam
        month = record.thang
        day = record.ngay

        year_month = f"{year}-{month:02d}"
        if year_month not in cham_cong_theo_thang:
            cham_cong_theo_thang[year_month] = {}
        cham_cong_theo_thang[year_month][day] = record

        all_months.add(month)
        all_years.add(year)

    # S·∫Øp x·∫øp c√°c th√°ng/nƒÉm t·ª´ m·ªõi ƒë·∫øn c≈©
    sorted_cham_cong_theo_thang = sorted(
        cham_cong_theo_thang.items(),
        key=lambda x: (int(x[0].split('-')[0]), int(x[0].split('-')[1])),
        reverse=True
    )

    # S·∫Øp x·∫øp th√°ng v√† nƒÉm ƒë·ªÉ hi·ªÉn th·ªã
    months = sorted(all_months)
    years = sorted(all_years)

    return render(request, 'ChamCong/cham_cong.html', {
        'is_super': False,
        'nhan_vien': nhan_vien,
        'cham_cong_theo_thang': sorted_cham_cong_theo_thang,
        'months': months,
        'years': years
    })


import cv2
import time
import os
from deepface import DeepFace
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from HOME.models import ChamCong, NhanVien
from datetime import datetime
from django.utils import timezone
import win32gui
import win32con

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c dataset
dataset_path = r"C:\Users\HP\Desktop\LTW\Dataset"

# H√†m ƒë·∫∑t c·ª≠a s·ªï OpenCV l√™n tr√™n c√πng
def set_window_always_on_top(window_name="Webcam"):
    hwnd = win32gui.FindWindow(None, window_name)
    if hwnd:
        win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 0, 0, 0, 0,
                              win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)

@login_required
def cham_cong_bang_khuon_mat(request):
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        return JsonResponse({"message": "‚ùå Kh√¥ng th·ªÉ m·ªü webcam"}, status=400)

    print("üì∏ Webcam ƒë√£ m·ªü. Chu·∫©n b·ªã nh·∫≠n di·ªán sau 3 gi√¢y...")
    start_time = time.time()
    detection_started = False

    result_message = "‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t"
    recognized = False
    nhan_vien_id = None

    while True:
        ret, frame = cap.read()
        if not ret:
            result_message = "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ webcam"
            break

        elapsed = time.time() - start_time

        if not detection_started and elapsed < 3:
            remaining = int(3 - elapsed)
            cv2.putText(frame, f"Chuan bi nhan dien: {remaining}s", (30, 50),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
        else:
            detection_started = True
            try:
                result = DeepFace.find(img_path=frame, db_path=dataset_path, enforce_detection=True)

                if len(result) > 0 and len(result[0]) > 0:
                    identity_path = result[0].iloc[0]["identity"]

                    # L·∫•y ID t·ª´ folder cha
                    nhan_vien_folder = os.path.basename(os.path.dirname(identity_path))
                    nhan_vien_id = int(nhan_vien_folder)

                    recognized = True

                    cv2.putText(frame, f"Thanh cong, ID: {nhan_vien_id}", (30, 50),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                    cv2.imshow("Webcam", frame)
                    set_window_always_on_top("Webcam")
                    cv2.waitKey(3000)
                    break
                else:
                    cv2.putText(frame, "Khong nhan ra", (30, 50),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

            except Exception as e:
                print("‚ùå L·ªói nh·∫≠n di·ªán:", e)
                result_message = f"‚ùå L·ªói nh·∫≠n di·ªán: {str(e)}"
                break

        cv2.imshow("Webcam", frame)
        set_window_always_on_top("Webcam")

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

    if recognized and nhan_vien_id:
        try:
            nhan_vien = NhanVien.objects.get(id=nhan_vien_id)
            now = timezone.localtime(timezone.now())

            ngay = now.day
            thang = now.month
            nam = now.year
            gio_vao = now.time()

            # X√°c ƒë·ªãnh tr·∫°ng th√°i
            if gio_vao.hour < 8 or (gio_vao.hour == 8 and gio_vao.minute <= 0):
                trang_thai = 0  # ƒê√∫ng gi·ªù
            else:
                trang_thai = 2  # Mu·ªôn

            cham_cong, created = ChamCong.objects.get_or_create(
                nhan_vien=nhan_vien,
                ngay=ngay,
                thang=thang,
                nam=nam,
                defaults={
                    'gio_vao': gio_vao,
                    'trang_thai': trang_thai
                }
            )

            if not created:
                return JsonResponse({"message": f"üü° Nh√¢n vi√™n ID {nhan_vien_id} ƒë√£ ch·∫•m c√¥ng h√¥m nay r·ªìi."})

            return JsonResponse({"message": f"üü¢ Ch·∫•m c√¥ng th√†nh c√¥ng cho nh√¢n vi√™n ID {nhan_vien_id}"})

        except NhanVien.DoesNotExist:
            return JsonResponse({"message": f"‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ID {nhan_vien_id} trong h·ªá th·ªëng"}, status=404)

    return JsonResponse({"message": result_message}, status=400)